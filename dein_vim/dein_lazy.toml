[[plugins]]
repo     = 'Shougo/neocomplete.vim'
on_event = 'InsertEnter'
hook_add = '''
  " Disable AutoComplPop.
  let g:acp_enableAtStartup = 0
  " Use neocomplete.
  let g:neocomplete#enable_at_startup = 1
  " Use smartcase.
  let g:neocomplete#enable_smart_case = 1
  " Set minimum syntax keyword length.
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

  " Define dictionary.
  let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

  " Define keyword.
  if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'

  " Plugin key-mappings.
  inoremap <expr><C-g> neocomplete#undo_completion()
  inoremap <expr><C-l> neocomplete#complete_common_string()

  " <CR>: close popup and save indent.
  inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
  function! s:my_cr_function()
    " For no inserting <CR> key.
    return pumvisible() ? "\<C-y>" : "\<CR>"
  endfunction
  " <TAB>: completion.
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  " <C-h>, <BS>: close popup and delete backword char.
  inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
  inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

  " Enable omni completion.
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=python3complete#Complete completeopt-=preview
  " jedy-vim
  autocmd FileType python setlocal omnifunc=jedi#completions
  let g:jedi#completions_enabled = 0
  let g:jedi#auto_vim_configuration = 0

  " Enable heavy omni completion.
  if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
  endif

  " For perlomni.vim setting.
  " https://github.com/c9s/perlomni.vim
  let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''

[[plugins]]
repo        = 'Shougo/neosnippet'
on_event    = 'InsertEnter'
depends     = ['neosnippet-snippets', 'vim-snippets']
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)

  let g:neosnippet#snippets_directory = '~/.vim/dein/repos/github.com/honza/vim-snippets/snippets'

  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''

[[plugins]]
repo      = 'Shougo/neosnippet-snippets'
on_source = ['neosnippet']

[[plugins]]
repo      = 'honza/vim-snippets'
on_source = ['neosnippet']

[[plugins]]
repo   = 'mattn/benchvimrc-vim'
on_cmd = ['BenchVimrc']


# Syntax
#
[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
hook_add = '''
  let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
repo  = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'css', 'scss', 'sass', 'vue']

[[plugins]]
repo  = 'pangloss/vim-javascript'
on_ft = ['html', 'javascript', 'javascript.jsx', 'vue']

[[plugins]]
repo        = 'mxw/vim-jsx'
on_ft       = ['html', 'javascript', 'javascript.jsx', 'vue']
hook_source = '''
  let g:jsx_ext_required = 0
'''

[[plugins]]
repo  = 'leafgarland/typescript-vim'
on_ft = ['typescript']

[[plugins]]
repo  = 'posva/vim-vue'
on_ft = ['vue']

[[plugins]]
repo  = 'fatih/vim-go'
on_ft = ['go']
hook_source = '''
  let g:go_highlight_functions = 1
  let g:go_highlight_methods = 1
  let g:go_highlight_structs = 1
'''

[[plugins]]
repo  = 'vim-scripts/nginx.vim'
on_ft = ['nginx']

[[plugins]]
repo  = 'itkq/fluentd-vim'
on_ft = ['fluentd']

[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo  = 'hdima/python-syntax'
on_ft = ['python', 'python3', 'djangohtml']
hook_add = '''
  let g:python_highlight_all = 1
'''

[[plugins]]
repo  = 'hynek/vim-python-pep8-indent'
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]  # Vimで正しくvirtualenvを処理できるようにする
repo  = 'jmcantrell/vim-virtualenv'
on_ft = ['python', 'python3', 'djangohtml']

[[plugins]]
repo        = 'davidhalter/jedi-vim'
on_ft       = ['python', 'python3', 'djangohtml']
hook_source = '''
  let g:jedi#popup_select_first = 0
  let g:jedi#popup_on_dot = 0
  let g:jedi#goto_command = "<leader>d"
  let g:jedi#goto_assignments_command = "<leader>g"
  let g:jedi#goto_definitions_command = ""
  let g:jedi#documentation_command = "K"
  let g:jedi#usages_command = "<leader>n"
  let g:jedi#rename_command = "<leader>R"
  autocmd FileType python setlocal completeopt-=preview
'''

[[plugins]]
repo     = 'hashivim/vim-terraform'
on_ft    = ['terraform']
hook_add = '''
  let g:terraform_align=1
  let g:terraform_fmt_on_save=1
'''
